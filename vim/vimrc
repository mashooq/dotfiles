set shell=bash
set clipboard=unnamed

set t_Co=256
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

set laststatus=2

"----------------------------------------------
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'
Plug 'vim-syntastic/syntastic'
Plug 'tpope/vim-projectionist'
Plug 'kien/rainbow_parentheses.vim'
Plug 'tpope/vim-dispatch'
Plug 'kien/ctrlp.vim'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'snoe/clj-refactor.nvim'
Plug 'posva/vim-vue'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'



" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
"Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'tpope/vim-classpath', { 'for': 'clojure' }
Plug 'tpope/vim-salve', { 'for': 'clojure' }
Plug 'vim-scripts/paredit.vim', { 'for': 'clojure' }
Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
Plug 'guns/vim-clojure-highlight', { 'for': 'clojure' }
Plug 'venantius/vim-cljfmt', { 'for': 'clojure' }
Plug 'venantius/vim-eastwood', { 'for': 'clojure' }

Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'mxw/vim-jsx', { 'for': 'javascript' }
Plug 'wookiehangover/jshint.vim', { 'for': 'javascript' }
Plug 'ternjs/tern_for_vim', { 'for': 'javascript' }

" Initialize plugin system
call plug#end()
"----------------------------------------------

" place backup files in folders dedicated to temporary files
set backupdir=~/.vim/tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim/tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" syntax highlighting
syntax on 

"set background=light
"let g:solarized_termcolors=256
"colorscheme solarized

" tabstop settings
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab
set shiftround

set autoindent
set backspace=indent,eol,start
set complete-=i
set smarttab

set nrformats-=octal

" Search is only case-sensitive for upper-case characters
set ignorecase
set smartcase
set hlsearch
set incsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
 nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" automatically reload files
set autoread

" Remember more commands and search history
set history=1000

" Make tab completion for files/buffers act like bash
set wildmenu
set wildignore=*.pyc,*.class

" Turn on line numbers
set number

" Open split panes below or to the right (see
" https://github.com/thoughtbot/dotfiles/)
set splitbelow
set splitright

" remap escape (eliminates reaching for escape key)
inoremap jj <ESC>

" Leader key on space bar
let mapleader = ' '

" show commands
set showcmd

set scrolloff=3
set sidescrolloff=5

" NERDTree toggling
nmap <silent> <leader>n :NERDTreeToggle<CR>

" find files with fzf
nmap <leader>ff :FZF<cr>

" Gundo toggling
nmap <silent> <leader>g :GundoToggle<CR>

" ZoomWin toggling
nnoremap <silent> <leader><leader> :ZoomWin<CR>

" Gitv should automatically decide where to place preview
let g:Gitv_OpenHorizontal = "auto"

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a single file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" quick editing of .vimrc (from sanitz)
nnoremap <silent> <leader>e :e! ~/.vimrc<cr>
nnoremap <silent> <leader>s :source ~/.vimrc<cr>

au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown

" Evaluate Clojure buffers on load
autocmd BufRead *.clj try | silent! Require | catch /^Fireplace/ | endtry

autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax   clojure RainbowParenthesesLoadRound
autocmd Syntax   clojure RainbowParenthesesLoadSquare
autocmd Syntax   clojure RainbowParenthesesLoadBraces

" Clojure fireplace bindings
:nmap ,r :Require! <bar> :RunTests<CR><CR>
:nmap ,e :.Eval<CR>


nmap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

let g:clj_refactor_prefix_rewriting = 0
